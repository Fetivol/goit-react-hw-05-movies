{"version":3,"file":"static/js/462.b306ae4d.chunk.js","mappings":"sSAEMA,E,OAAMC,EAAAA,OAAa,CACvBC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIP,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBN,EAAIO,IAAI,uBAF5B,UAGqB,OADlBC,EAFH,QAGUC,OAHV,sBAIK,IAAIC,MAAMF,EAASC,QAJxB,gCAMID,EAASG,MANb,sCAQHC,QAAQC,MAAR,MARG,qFAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,gGAEoBf,EAAIO,IAAI,gBAAiB,CAC9CJ,OAAQY,IAHP,UAKqB,OAHlBP,EAFH,QAKUC,OALV,sBAMK,IAAIC,MAAMF,EAASC,QANxB,gCAQID,EAASG,MARb,sCAUHC,QAAQC,MAAR,MAVG,qFAeA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA0BC,GAA1B,gGAEoBjB,EAAIO,IAAJ,iBAAkBU,IAFtC,UAGqB,OADlBT,EAFH,QAGUC,OAHV,sBAIK,IAAIC,MAAMF,EAASC,QAJxB,gCAMID,EAASG,MANb,sCAQHC,QAAQC,MAAR,MARG,qFAaA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA8BD,GAA9B,gGAEoBjB,EAAIO,IAAJ,iBAAkBU,EAAlB,aAFpB,UAGqB,OADlBT,EAFH,QAGUC,OAHV,sBAIK,IAAIC,MAAMF,EAASC,QAJxB,gCAMID,EAASG,MANb,sCAQHC,QAAQC,MAAR,MARG,qFAYA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAiCF,GAAjC,gGAEoBjB,EAAIO,IAAJ,iBAAkBU,EAAlB,aAFpB,UAGqB,OADlBT,EAFH,QAGUC,OAHV,sBAIK,IAAIC,MAAMF,EAASC,QAJxB,gCAMID,EAASG,MANb,sCAQHC,QAAQC,MAAR,MARG,qF,6HC5DMO,EAAe,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAC7B,OACE,2BACGA,EAAaC,aACZ,gBACEC,IAAG,0CAAqCF,EAAaC,aACrDE,IAAKH,EAAaI,MAClBC,MAAO,OAGT,gBAAKH,IAZX,8EAY4BC,IAAI,SAASE,MAAO,OAG5C,4BACE,0BACGL,EAAaI,MADhB,KAEG,IAAIE,KAAKN,EAAaO,cAAcC,cAFvC,QAIA,wCAAgBC,KAAKC,KAAMV,EAAaW,aAAe,GAAM,KAA7D,QACA,qCACA,uBAAIX,EAAaY,YACjB,oCACA,uBACGC,MAAMC,QAAQd,EAAae,QACxBf,EAAae,OAAOC,KAAI,SAAAC,GACtB,MAAM,GAAN,OAAUA,EAAKC,KAAf,IACD,IACD,6BAKb,E,0BCUD,EAzCkB,WAAO,IAAD,IAEhBC,EAAQ,qBADGC,EAAAA,EAAAA,MACSC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IACjC1B,GAAa2B,EAAAA,EAAAA,MAAb3B,SACR,GAAwC4B,EAAAA,EAAAA,UAAS,CAAC,GAAlD,eAAOxB,EAAP,KAAqByB,EAArB,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WAAM,wCAId,8GAE+B/B,EAAAA,EAAAA,IAAWC,GAF1C,OAEUI,EAFV,OAGIyB,EAAgBzB,GAHpB,gDAKIT,QAAQC,MAAR,MALJ,sGAJc,sBACTI,GADS,mCAcd+B,EACD,GAAE,CAAC/B,KAGF,yCACcA,EADd,qBAEE,SAAC,KAAD,CAAMgC,GAAIT,EAAV,+BACA,SAACpB,EAAD,CAAcC,aAAcA,KAC5B,2BACE,yBACE,SAAC,KAAD,CAAM4B,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGJ,SAAC,KAAD,MAGL,C","sources":["Api.js","components/MovieDetails/MovieDetails.js","pages/MoviePage.js"],"sourcesContent":["import axios from 'axios';\n\nconst API = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '31e4aa16d394f964079920d6173ce10a',\n    language: 'en-US',\n  },\n});\n\nexport async function fetchTopMovies() {\n  try {\n    const response = await API.get('/trending/movie/day');\n    if (response.status !== 200) {\n      throw new Error(response.status);\n    }\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\nexport async function fetchQueryMovies(queryParams) {\n  try {\n    const response = await API.get('/search/movie', {\n      params: queryParams,\n    });\n    if (response.status !== 200) {\n      throw new Error(response.status);\n    }\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\nexport async function fetchMovie(movie_id) {\n  try {\n    const response = await API.get(`/movie/${movie_id}`);\n    if (response.status !== 200) {\n      throw new Error(response.status);\n    }\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\nexport async function fetchMovieCast(movie_id) {\n  try {\n    const response = await API.get(`/movie/${movie_id}/credits`);\n    if (response.status !== 200) {\n      throw new Error(response.status);\n    }\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\nexport async function fetchMovieReviews(movie_id) {\n  try {\n    const response = await API.get(`/movie/${movie_id}/reviews`);\n    if (response.status !== 200) {\n      throw new Error(response.status);\n    }\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n","const defaultImg =\n  'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\nexport const MovieDetails = ({ movieDetails }) => {\n  return (\n    <div>\n      {movieDetails.poster_path ? (\n        <img\n          src={`https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`}\n          alt={movieDetails.title}\n          width={250}\n        />\n      ) : (\n        <img src={defaultImg} alt=\"poster\" width={250} />\n      )}\n\n      <div>\n        <h2>\n          {movieDetails.title} (\n          {new Date(movieDetails.release_date).getFullYear()})\n        </h2>\n        <p>User score: {Math.ceil((movieDetails.vote_average / 10) * 100)}%</p>\n        <h3>Oerwiev</h3>\n        <p>{movieDetails.overview}</p>\n        <h4>Genres</h4>\n        <p>\n          {Array.isArray(movieDetails.genres)\n            ? movieDetails.genres.map(elem => {\n                return `${elem.name} `;\n              })\n            : 'No genres available'}\n        </p>\n      </div>\n    </div>\n  );\n};\n","import { fetchMovie } from 'Api';\nimport { MovieDetails } from 'components/MovieDetails/MovieDetails';\nimport { useEffect, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nconst MoviePage = () => {\n  const location = useLocation();\n  const backLink = location.state?.from ?? '/';\n  const { movie_id } = useParams();\n  const [movieDetails, setMovieDetails] = useState({});\n\n  useEffect(() => {\n    if (!movie_id) {\n      return;\n    }\n    async function getTopMovies() {\n      try {\n        const movieDetails = await fetchMovie(movie_id);\n        setMovieDetails(movieDetails);\n      } catch (error) {\n        console.error(error);\n      } finally {\n      }\n    }\n\n    getTopMovies();\n  }, [movie_id]);\n\n  return (\n    <div>\n      Movie page {movie_id} with description\n      <Link to={backLink}>Back to the list</Link>\n      <MovieDetails movieDetails={movieDetails} />\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Outlet />\n    </div>\n  );\n};\n\nexport default MoviePage;\n"],"names":["API","axios","baseURL","params","api_key","language","fetchTopMovies","get","response","status","Error","data","console","error","fetchQueryMovies","queryParams","fetchMovie","movie_id","fetchMovieCast","fetchMovieReviews","MovieDetails","movieDetails","poster_path","src","alt","title","width","Date","release_date","getFullYear","Math","ceil","vote_average","overview","Array","isArray","genres","map","elem","name","backLink","useLocation","state","from","useParams","useState","setMovieDetails","useEffect","getTopMovies","to"],"sourceRoot":""}